package application.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import application.model.Confirmation;
import application.model.User;
import application.service.ConfirmationService;
import application.service.EmailService;
import application.service.UserService;
import application.toolbox.Verification;
import lombok.Data;

@Data
@Controller
public class LogController {
	
	UserService userSer;
	EmailService email;
	Verification verify;
	ConfirmationService confirmationService;
	
	@Autowired
	public LogController(UserService userSer, EmailService sendEmail, Verification verify, ConfirmationService confirmationService) {
		this.userSer = userSer;
		this.email = sendEmail;
		this.verify = verify;
		this.confirmationService = confirmationService;
	}
	
	
	@PostMapping("/login/*")
	public String login(HttpSession session, @RequestBody User sentUser) {

		User currentUser;
		String myPath = "start";
		
		currentUser = userSer.getLogin(sentUser.getUsername(), sentUser.getPassword());


		if (currentUser != null) {
//			System.out.println("it should work?");
			session.setAttribute("user", currentUser);

			// need logic to properly make the url.
			myPath = currentUser.getPage();

		} else {
			myPath = "http://localhost:9001/(?)/incorrectcredentials";
		}

		return myPath;
	}

	@PostMapping("/logout/*")
	public String logout(HttpSession session) {

		session.invalidate();
		return "path to home screen";
	}


	@PostMapping("/forgotPassword/*")
	public void forgotPassword(HttpSession session, @RequestBody User currentUser) {
		String userEmail = currentUser.getEmail(); 
		
		if (userEmail != null) {
			User user = userSer.getUserByEmail(userEmail);

			Confirmation confirmationToken = new Confirmation(currentUser);
			confirmationService.createConfirmationToken(confirmationToken);

	        SimpleMailMessage mailMessage = new SimpleMailMessage();
	        mailMessage.setTo(userEmail);
	        mailMessage.setSubject("Password reset link!");
	        mailMessage.setText("To reset your password, please click here : "
	        +"http://localhost:9022/reset-password/?token="+confirmationToken.getConfirmationToken() 
	        + "\n\n your username is: " + user.getUsername());

	        email.sendEmail(mailMessage);

		} else {
			session.setAttribute("message", "no email found");//we can use this to get tiger stuff in JS
		}

	}

	@RequestMapping(value="/reset-password/*", method= {RequestMethod.GET, RequestMethod.POST})
	public ModelAndView confirmUserAccount(ModelAndView modelAndView, @RequestParam("token")String confirmationToken){
		
		Confirmation token = confirmationService.findByConfirmationToken(confirmationToken);
		
		if(token != null){
			User user = userService.getUserByEmail(token.getUser().getEmail());
			System.out.println(user);
			user.setConfirmed(true);
			System.out.println(user.isConfirmed());
			userService.createUser(user);
			
			System.out.println("it worked");
			
		}
		else
		{
			modelAndView.addObject("message","The link is invalid or broken!");
			modelAndView.setViewName("error");
		}
		
		return modelAndView;
	}

}
