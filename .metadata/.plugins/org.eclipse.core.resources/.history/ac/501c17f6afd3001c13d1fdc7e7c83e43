package application.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import application.model.Confirmation;
import application.service.ConfirmationService;
import application.service.EmailService;
import application.service.UserService;

public class RegesterController {
	
	private UserService userService;
	
	private ConfirmationService confirmation;
	
	private EmailService emailService;
	
	@Autowired
	public RegesterController(UserService userService, ConfirmationService confirmation, EmailService emailService ) {
		this.userService = userService;
		this.confirmation = confirmation;
		this.emailService = emailService;
	}
	
	
	@RequestMapping(value="/register", method = RequestMethod.POST)
	public void sendEmailLink(String toEmail) {
//		ModelAndView modelAndView, User userEntity) {
			
//		    public ModelAndView registerUser(){

//		    	User existingUser = userRepository.findByEmailIdIgnoreCase(userEntity.getEmail());
//		        if(existingUser != null) {
//		            modelAndView.addObject("message","This email already exists!");
//		            modelAndView.setViewName("error");
//		        }
//		        else {
//		            userService.createUser(userEntity);
	//
		            Confirmation confirmationToken = new Confirmation();
	//
//		            confirmationTokenRepository.save(confirmationToken);

		            SimpleMailMessage mailMessage = new SimpleMailMessage();
		            mailMessage.setTo(toEmail);
		            mailMessage.setSubject("Complete Registration!");
		            mailMessage.setFrom("socialmedianow63@gmail.com");
		            mailMessage.setText("To confirm your account, please click here : "
		            +"http://localhost:8080/confirm-account?token="+confirmationToken.getConfirmationToken());

		            emailService.sendEmail(mailMessage);

		            modelAndView.addObject("emailId", userEntity.getEmail());

		            modelAndView.setViewName("successfulRegisteration");
//		        }

		        return modelAndView;
		    }
	
	
	
	

	    @RequestMapping(value="/register", method = RequestMethod.GET)
	    public ModelAndView displayRegistration(ModelAndView modelAndView, UserEntity userEntity)
	    {
	        modelAndView.addObject("userEntity", userEntity);
	        modelAndView.setViewName("register");
	        return modelAndView;
	    }
	    
	    
	    
	    @RequestMapping(value="/register", method = RequestMethod.POST)
	    public ModelAndView registerUser(ModelAndView modelAndView, UserEntity userEntity)
	    {

	    	UserEntity existingUser = userRepository.findByEmailIdIgnoreCase(userEntity.getEmailId());
	        if(existingUser != null)
	        {
	            modelAndView.addObject("message","This email already exists!");
	            modelAndView.setViewName("error");
	        }
	        else
	        {
	            userRepository.save(userEntity);

	            ConfirmationToken confirmationToken = new ConfirmationToken(userEntity);

	            confirmationTokenRepository.save(confirmationToken);

	            SimpleMailMessage mailMessage = new SimpleMailMessage();
	            mailMessage.setTo(userEntity.getEmailId());
	            mailMessage.setSubject("Complete Registration!");
	            mailMessage.setFrom("YOUR EMAIL ADDRESS");
	            mailMessage.setText("To confirm your account, please click here : "
	            +"http://localhost:8080/confirm-account?token="+confirmationToken.getConfirmationToken());

	            emailService.sendEmail(mailMessage);

	            modelAndView.addObject("emailId", userEntity.getEmailId());

	            modelAndView.setViewName("successfulRegisteration");
	        }

	        return modelAndView;
	    }
	    

	    @RequestMapping(value="/confirm-account", method= {RequestMethod.GET, RequestMethod.POST})
	    public ModelAndView confirmUserAccount(ModelAndView modelAndView, @RequestParam("token")String confirmationToken)
	    {
	        ConfirmationToken token = confirmationTokenRepository.findByConfirmationToken(confirmationToken);

	        if(token != null)
	        {
	        	UserEntity user = userRepository.findByEmailIdIgnoreCase(token.getUserEntity().getEmailId());
	            user.setEnabled(true);
	            userRepository.save(user);
	            modelAndView.setViewName("accountVerified");
	        }
	        else
	        {
	            modelAndView.addObject("message","The link is invalid or broken!");
	            modelAndView.setViewName("error");
	        }

	        return modelAndView;
	    }
	}

}
